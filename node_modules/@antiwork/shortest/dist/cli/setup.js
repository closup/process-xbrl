var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// src/cli/setup.ts
import { execSync } from "child_process";
import pc from "picocolors";
async function setup() {
  console.log(pc.cyan("Setting up shortest..."));
  try {
    const peers = [
      "playwright",
      "@anthropic-ai/sdk",
      "dotenv",
      "expect",
      "esbuild"
    ];
    const missingPeers = peers.filter((pkg) => {
      try {
        __require.resolve(pkg);
        return false;
      } catch {
        return true;
      }
    });
    if (missingPeers.length === 0) {
      console.log(pc.green("\u2713 All dependencies already installed"));
      return;
    }
    const pkgManager = process.env.npm_config_user_agent?.startsWith("pnpm") ? "pnpm" : "npm";
    for (const pkg of missingPeers) {
      console.log(pc.yellow(`Installing ${pkg}...`));
      execSync(`${pkgManager} add ${pkg}`, { stdio: "inherit" });
    }
    console.log(pc.yellow("Installing Playwright browsers..."));
    execSync(`${pkgManager} exec playwright install`, { stdio: "inherit" });
    console.log(pc.green("\u2713 Setup complete!"));
    console.log(pc.cyan("\nMake sure to set your ANTHROPIC_API_KEY in .env"));
  } catch (error) {
    console.error(pc.red("Setup failed:"), error);
    process.exit(1);
  }
}
setup();
