declare global {
    interface Window {
        cursorPosition: {
            x: number;
            y: number;
        };
        showClick: () => void;
    }
}
import { Page } from 'playwright';
import { BaseBrowserTool } from './index';
import { ActionInput, ToolResult, BetaToolType } from '../../types/browser';
import { BrowserManager } from '../manager';
import { TestContext, BrowserToolConfig } from '../../types';
export declare class BrowserTool extends BaseBrowserTool {
    private page;
    private browserManager;
    protected readonly toolType: BetaToolType;
    protected readonly toolName: string;
    private screenshotDir;
    private cursorVisible;
    private lastMousePosition;
    private githubTool?;
    private viewport;
    private testContext?;
    private readonly MAX_SCREENSHOTS;
    private readonly MAX_AGE_HOURS;
    constructor(page: Page, browserManager: BrowserManager, config: BrowserToolConfig);
    private initialize;
    click(selector: string): Promise<void>;
    clickAtCoordinates(x: number, y: number): Promise<void>;
    execute(input: ActionInput): Promise<ToolResult>;
    private getMetadata;
    private isPageStable;
    private takeScreenshotWithMetadata;
    toToolParameters(): {
        type: BetaToolType;
        name: string;
        display_width_px: number;
        display_height_px: number;
        display_number: number;
    };
    waitForSelector(selector: string, options?: {
        timeout: number;
    }): Promise<void>;
    fill(selector: string, value: string): Promise<void>;
    press(selector: string, key: string): Promise<void>;
    findElement(selector: string): Promise<import("playwright").ElementHandle<HTMLElement | SVGElement> | null>;
    getPage(): Page;
    waitForNavigation(options?: {
        timeout: number;
    }): Promise<void>;
    updateTestContext(newContext: TestContext): void;
    private cleanupScreenshots;
}
